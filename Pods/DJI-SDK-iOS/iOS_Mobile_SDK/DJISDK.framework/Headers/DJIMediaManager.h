//
//  DJIMediaManager.h
//  DJISDK
//
//  Copyright Â© 2015, DJI. All rights reserved.
//

#import <DJISDK/DJISDKFoundation.h>

NS_ASSUME_NONNULL_BEGIN

@class DJIMediaFile;
@class DJIMediaManager;
@class DJIMediaVideoPlaybackState;


/**
 *  This protocol provides a delegate method to receive the updated video playback
 *  state of the media manager.
 */
@protocol DJIMediaManagerDelegate <NSObject>

@optional


/**
 *  Updates the video playback state of the media manager. This update method will
 *  only be called when the media manager is playing a video.
 *  
 *  @param manager The media manager updates the playback state.
 *  @param state The playback state.
 */
-(void)manager:(DJIMediaManager *)manager didUpdateVideoPlaybackState:(DJIMediaVideoPlaybackState *)state;


/**
 *  Updates the video playback data of the media manager. This update method will
 *  only be called when the media manager is playing a video.
 *  
 *  @param manager The media manager updates the playback state.
 *  @param data An uint8_t value of video playback data.
 *  @param length A size_t value of the data length.
 *  @param forRendering Check if it's for rendering.
 */
-(void)manager:(DJIMediaManager *)manager didUpdateVideoPlaybackData:(uint8_t *)data length:(size_t)length forRendering:(BOOL)forRendering; 

@end

/*********************************************************************************/
#pragma mark - DJIMediaManager
/*********************************************************************************/


/**
 *  The media manager is used to interact with the file system on the SD card. By
 *  using the media manager, the user  can get the metadata for all the multimedia
 *  files, and has access to each individual multimedia file.
 */
@interface DJIMediaManager : NSObject


/**
 *  Delegate that receives media manager's status update.
 */
@property (nonatomic, nullable, weak) id<DJIMediaManagerDelegate> delegate;


/**
 *  Fetch the media list from the remote album. Set the camera's work mode to
 *  `DJICameraModeMediaDownload`  before executing this method.
 *  
 *  @param mediaList The array of DJIMedia objects.
 *  @param error Error retrieving the value.
 *  @param completion Completion block to receive the result.
 */
- (void)fetchMediaListWithCompletion:(void (^_Nonnull)(NSArray<DJIMediaFile *> *_Nullable mediaList, NSError *_Nullable error))completion;


/**
 *  Delete media files from remote album. Set the camera's work mode to
 *  `DJICameraModeMediaDownload` before executing  his method. Deletion is not
 *  supported by the media file generated by a panorama mission.
 *  
 *  @param media Media files to be deleted.
 *  @param deleteFailures The array of the DJIMedia objects.
 *  @param error Error retrieving the value.
 *  @param completion Completion block to receive the result.
 */
- (void)deleteMedia:(NSArray<DJIMediaFile *> *_Nonnull)media withCompletion:(void (^_Nullable)(NSArray<DJIMediaFile *> *_Nonnull deleteFailures, NSError *_Nullable error))completion;

@end


/**
 *  Category of `DJIMediaManager` includes methods to control the video playback.
 */
@interface DJIMediaManager (VideoPlayback)


/**
 *  Checks if the media manager supports video playback or not. Video playback is
 *  supported only by Mavic Pro.  @return `YES` if the media manager supports video
 *  playback.
 *  
 *  @return `YES` if the media manager supports video playback.
 */
- (BOOL)isVideoPlaybackSupported;


/**
 *  Start video playback through `DJIMediaManager`. When the media manager is
 *  playing a video, video data can be  received from
 *  `manager:didUpdateVideoPlaybackData:length:forRendering` and playback state
 *  received  from `manager:didUpdateVideoPlaybackState`. Video playback  through
 *  `DJIMediaManager` is fixed at 720p.
 *  
 *  @param videoMedia The video to play.
 *  @param completion The completion block to receive the command execution result.
 */
- (void)playVideo:(DJIMediaFile *)videoMedia withCompletion:(DJICompletionBlock)completion;


/**
 *  The media manager resumes the paused video.
 *  
 *  @param completion The completion block to receive the command execution result.
 */
- (void)resumeWithCompletion:(DJICompletionBlock)completion;


/**
 *  The media manager pauses the playing video.
 *  
 *  @param completion The completion block to receive the command execution result.
 */
- (void)pauseWithCompletion:(DJICompletionBlock)completion;



/**
 *  The media manager stops the playing video.
 *  
 *  @param completion The completion block to receive the command execution result.
 */
- (void)stopWithCompletion:(DJICompletionBlock)completion;


/**
 *  Video playback is skipped to the new position in seconds from the start of the
 *  video.
 *  
 *  @param position New position to play in seconds from start of video. Input with precision of greater than 3 decimal places, will be rounded to 3.
 *  @param completion The completion block to receive the command execution result.
 */
- (void)moveToPosition:(float)position withCompletion:(DJICompletionBlock)completion;

@end

NS_ASSUME_NONNULL_END
